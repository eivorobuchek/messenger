// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"
	models "user_profile_service/internal/app/models"

	mock "github.com/stretchr/testify/mock"
)

// RepositoryProfile is an autogenerated mock type for the RepositoryProfile type
type RepositoryProfile struct {
	mock.Mock
}

type RepositoryProfile_Expecter struct {
	mock *mock.Mock
}

func (_m *RepositoryProfile) EXPECT() *RepositoryProfile_Expecter {
	return &RepositoryProfile_Expecter{mock: &_m.Mock}
}

// EditUserProfile provides a mock function with given fields: ctx, user
func (_m *RepositoryProfile) EditUserProfile(ctx context.Context, user models.Profile) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for EditUserProfile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Profile) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RepositoryProfile_EditUserProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EditUserProfile'
type RepositoryProfile_EditUserProfile_Call struct {
	*mock.Call
}

// EditUserProfile is a helper method to define mock.On call
//   - ctx context.Context
//   - user models.Profile
func (_e *RepositoryProfile_Expecter) EditUserProfile(ctx interface{}, user interface{}) *RepositoryProfile_EditUserProfile_Call {
	return &RepositoryProfile_EditUserProfile_Call{Call: _e.mock.On("EditUserProfile", ctx, user)}
}

func (_c *RepositoryProfile_EditUserProfile_Call) Run(run func(ctx context.Context, user models.Profile)) *RepositoryProfile_EditUserProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Profile))
	})
	return _c
}

func (_c *RepositoryProfile_EditUserProfile_Call) Return(_a0 error) *RepositoryProfile_EditUserProfile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepositoryProfile_EditUserProfile_Call) RunAndReturn(run func(context.Context, models.Profile) error) *RepositoryProfile_EditUserProfile_Call {
	_c.Call.Return(run)
	return _c
}

// FindUsersByNickname provides a mock function with given fields: ctx, nickname
func (_m *RepositoryProfile) FindUsersByNickname(ctx context.Context, nickname models.Nickname) ([]models.Profile, error) {
	ret := _m.Called(ctx, nickname)

	if len(ret) == 0 {
		panic("no return value specified for FindUsersByNickname")
	}

	var r0 []models.Profile
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Nickname) ([]models.Profile, error)); ok {
		return rf(ctx, nickname)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Nickname) []models.Profile); ok {
		r0 = rf(ctx, nickname)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Profile)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Nickname) error); ok {
		r1 = rf(ctx, nickname)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepositoryProfile_FindUsersByNickname_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUsersByNickname'
type RepositoryProfile_FindUsersByNickname_Call struct {
	*mock.Call
}

// FindUsersByNickname is a helper method to define mock.On call
//   - ctx context.Context
//   - nickname models.Nickname
func (_e *RepositoryProfile_Expecter) FindUsersByNickname(ctx interface{}, nickname interface{}) *RepositoryProfile_FindUsersByNickname_Call {
	return &RepositoryProfile_FindUsersByNickname_Call{Call: _e.mock.On("FindUsersByNickname", ctx, nickname)}
}

func (_c *RepositoryProfile_FindUsersByNickname_Call) Run(run func(ctx context.Context, nickname models.Nickname)) *RepositoryProfile_FindUsersByNickname_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Nickname))
	})
	return _c
}

func (_c *RepositoryProfile_FindUsersByNickname_Call) Return(_a0 []models.Profile, _a1 error) *RepositoryProfile_FindUsersByNickname_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RepositoryProfile_FindUsersByNickname_Call) RunAndReturn(run func(context.Context, models.Nickname) ([]models.Profile, error)) *RepositoryProfile_FindUsersByNickname_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepositoryProfile creates a new instance of RepositoryProfile. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepositoryProfile(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepositoryProfile {
	mock := &RepositoryProfile{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
