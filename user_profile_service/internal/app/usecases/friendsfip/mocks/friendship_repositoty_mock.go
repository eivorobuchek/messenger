// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "user_profile_service/internal/app/models"
)

// FriendshipRepository is an autogenerated mock type for the FriendshipRepository type
type FriendshipRepository struct {
	mock.Mock
}

type FriendshipRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *FriendshipRepository) EXPECT() *FriendshipRepository_Expecter {
	return &FriendshipRepository_Expecter{mock: &_m.Mock}
}

// AddFriendRequest provides a mock function with given fields: ctx, friendID, userID
func (_m *FriendshipRepository) AddFriendRequest(ctx context.Context, friendID models.UserId, userID models.UserId) error {
	ret := _m.Called(ctx, friendID, userID)

	if len(ret) == 0 {
		panic("no return value specified for AddFriendRequest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UserId, models.UserId) error); ok {
		r0 = rf(ctx, friendID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FriendshipRepository_AddFriendRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddFriendRequest'
type FriendshipRepository_AddFriendRequest_Call struct {
	*mock.Call
}

// AddFriendRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - friendID models.UserId
//   - userID models.UserId
func (_e *FriendshipRepository_Expecter) AddFriendRequest(ctx interface{}, friendID interface{}, userID interface{}) *FriendshipRepository_AddFriendRequest_Call {
	return &FriendshipRepository_AddFriendRequest_Call{Call: _e.mock.On("AddFriendRequest", ctx, friendID, userID)}
}

func (_c *FriendshipRepository_AddFriendRequest_Call) Run(run func(ctx context.Context, friendID models.UserId, userID models.UserId)) *FriendshipRepository_AddFriendRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.UserId), args[2].(models.UserId))
	})
	return _c
}

func (_c *FriendshipRepository_AddFriendRequest_Call) Return(_a0 error) *FriendshipRepository_AddFriendRequest_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FriendshipRepository_AddFriendRequest_Call) RunAndReturn(run func(context.Context, models.UserId, models.UserId) error) *FriendshipRepository_AddFriendRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetFriends provides a mock function with given fields: ctx, userID
func (_m *FriendshipRepository) GetFriends(ctx context.Context, userID models.UserId) ([]models.Profile, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetFriends")
	}

	var r0 []models.Profile
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UserId) ([]models.Profile, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.UserId) []models.Profile); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Profile)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.UserId) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FriendshipRepository_GetFriends_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFriends'
type FriendshipRepository_GetFriends_Call struct {
	*mock.Call
}

// GetFriends is a helper method to define mock.On call
//   - ctx context.Context
//   - userID models.UserId
func (_e *FriendshipRepository_Expecter) GetFriends(ctx interface{}, userID interface{}) *FriendshipRepository_GetFriends_Call {
	return &FriendshipRepository_GetFriends_Call{Call: _e.mock.On("GetFriends", ctx, userID)}
}

func (_c *FriendshipRepository_GetFriends_Call) Run(run func(ctx context.Context, userID models.UserId)) *FriendshipRepository_GetFriends_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.UserId))
	})
	return _c
}

func (_c *FriendshipRepository_GetFriends_Call) Return(_a0 []models.Profile, _a1 error) *FriendshipRepository_GetFriends_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FriendshipRepository_GetFriends_Call) RunAndReturn(run func(context.Context, models.UserId) ([]models.Profile, error)) *FriendshipRepository_GetFriends_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveFriendRequest provides a mock function with given fields: ctx, userID, friendID
func (_m *FriendshipRepository) RemoveFriendRequest(ctx context.Context, userID models.UserId, friendID models.UserId) error {
	ret := _m.Called(ctx, userID, friendID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveFriendRequest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UserId, models.UserId) error); ok {
		r0 = rf(ctx, userID, friendID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FriendshipRepository_RemoveFriendRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveFriendRequest'
type FriendshipRepository_RemoveFriendRequest_Call struct {
	*mock.Call
}

// RemoveFriendRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - userID models.UserId
//   - friendID models.UserId
func (_e *FriendshipRepository_Expecter) RemoveFriendRequest(ctx interface{}, userID interface{}, friendID interface{}) *FriendshipRepository_RemoveFriendRequest_Call {
	return &FriendshipRepository_RemoveFriendRequest_Call{Call: _e.mock.On("RemoveFriendRequest", ctx, userID, friendID)}
}

func (_c *FriendshipRepository_RemoveFriendRequest_Call) Run(run func(ctx context.Context, userID models.UserId, friendID models.UserId)) *FriendshipRepository_RemoveFriendRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.UserId), args[2].(models.UserId))
	})
	return _c
}

func (_c *FriendshipRepository_RemoveFriendRequest_Call) Return(_a0 error) *FriendshipRepository_RemoveFriendRequest_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FriendshipRepository_RemoveFriendRequest_Call) RunAndReturn(run func(context.Context, models.UserId, models.UserId) error) *FriendshipRepository_RemoveFriendRequest_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFriendRequestStatus provides a mock function with given fields: ctx, friendID, userId, status
func (_m *FriendshipRepository) UpdateFriendRequestStatus(ctx context.Context, friendID models.UserId, userId models.UserId, status string) error {
	ret := _m.Called(ctx, friendID, userId, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFriendRequestStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UserId, models.UserId, string) error); ok {
		r0 = rf(ctx, friendID, userId, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FriendshipRepository_UpdateFriendRequestStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFriendRequestStatus'
type FriendshipRepository_UpdateFriendRequestStatus_Call struct {
	*mock.Call
}

// UpdateFriendRequestStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - friendID models.UserId
//   - userId models.UserId
//   - status string
func (_e *FriendshipRepository_Expecter) UpdateFriendRequestStatus(ctx interface{}, friendID interface{}, userId interface{}, status interface{}) *FriendshipRepository_UpdateFriendRequestStatus_Call {
	return &FriendshipRepository_UpdateFriendRequestStatus_Call{Call: _e.mock.On("UpdateFriendRequestStatus", ctx, friendID, userId, status)}
}

func (_c *FriendshipRepository_UpdateFriendRequestStatus_Call) Run(run func(ctx context.Context, friendID models.UserId, userId models.UserId, status string)) *FriendshipRepository_UpdateFriendRequestStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.UserId), args[2].(models.UserId), args[3].(string))
	})
	return _c
}

func (_c *FriendshipRepository_UpdateFriendRequestStatus_Call) Return(_a0 error) *FriendshipRepository_UpdateFriendRequestStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FriendshipRepository_UpdateFriendRequestStatus_Call) RunAndReturn(run func(context.Context, models.UserId, models.UserId, string) error) *FriendshipRepository_UpdateFriendRequestStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewFriendshipRepository creates a new instance of FriendshipRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFriendshipRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *FriendshipRepository {
	mock := &FriendshipRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
