// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	models "auth_service/internal/app/models"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// AuthRepository is an autogenerated mock type for the AuthRepository type
type AuthRepository struct {
	mock.Mock
}

type AuthRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthRepository) EXPECT() *AuthRepository_Expecter {
	return &AuthRepository_Expecter{mock: &_m.Mock}
}

// GetRegisterUserByEmail provides a mock function with given fields: ctx, email
func (_m *AuthRepository) GetRegisterUserByEmail(ctx context.Context, email models.Email) (*models.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetRegisterUserByEmail")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Email) (*models.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Email) *models.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Email) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthRepository_GetRegisterUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRegisterUserByEmail'
type AuthRepository_GetRegisterUserByEmail_Call struct {
	*mock.Call
}

// GetRegisterUserByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email models.Email
func (_e *AuthRepository_Expecter) GetRegisterUserByEmail(ctx interface{}, email interface{}) *AuthRepository_GetRegisterUserByEmail_Call {
	return &AuthRepository_GetRegisterUserByEmail_Call{Call: _e.mock.On("GetRegisterUserByEmail", ctx, email)}
}

func (_c *AuthRepository_GetRegisterUserByEmail_Call) Run(run func(ctx context.Context, email models.Email)) *AuthRepository_GetRegisterUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Email))
	})
	return _c
}

func (_c *AuthRepository_GetRegisterUserByEmail_Call) Return(_a0 *models.User, _a1 error) *AuthRepository_GetRegisterUserByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthRepository_GetRegisterUserByEmail_Call) RunAndReturn(run func(context.Context, models.Email) (*models.User, error)) *AuthRepository_GetRegisterUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields: ctx, userInfo, token
func (_m *AuthRepository) Login(ctx context.Context, userInfo *models.User, token models.Token) error {
	ret := _m.Called(ctx, userInfo, token)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.User, models.Token) error); ok {
		r0 = rf(ctx, userInfo, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthRepository_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type AuthRepository_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - userInfo *models.User
//   - token models.Token
func (_e *AuthRepository_Expecter) Login(ctx interface{}, userInfo interface{}, token interface{}) *AuthRepository_Login_Call {
	return &AuthRepository_Login_Call{Call: _e.mock.On("Login", ctx, userInfo, token)}
}

func (_c *AuthRepository_Login_Call) Run(run func(ctx context.Context, userInfo *models.User, token models.Token)) *AuthRepository_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.User), args[2].(models.Token))
	})
	return _c
}

func (_c *AuthRepository_Login_Call) Return(_a0 error) *AuthRepository_Login_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthRepository_Login_Call) RunAndReturn(run func(context.Context, *models.User, models.Token) error) *AuthRepository_Login_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterUser provides a mock function with given fields: ctx, o
func (_m *AuthRepository) RegisterUser(ctx context.Context, o *models.User) error {
	ret := _m.Called(ctx, o)

	if len(ret) == 0 {
		panic("no return value specified for RegisterUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) error); ok {
		r0 = rf(ctx, o)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthRepository_RegisterUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterUser'
type AuthRepository_RegisterUser_Call struct {
	*mock.Call
}

// RegisterUser is a helper method to define mock.On call
//   - ctx context.Context
//   - o *models.User
func (_e *AuthRepository_Expecter) RegisterUser(ctx interface{}, o interface{}) *AuthRepository_RegisterUser_Call {
	return &AuthRepository_RegisterUser_Call{Call: _e.mock.On("RegisterUser", ctx, o)}
}

func (_c *AuthRepository_RegisterUser_Call) Run(run func(ctx context.Context, o *models.User)) *AuthRepository_RegisterUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.User))
	})
	return _c
}

func (_c *AuthRepository_RegisterUser_Call) Return(_a0 error) *AuthRepository_RegisterUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthRepository_RegisterUser_Call) RunAndReturn(run func(context.Context, *models.User) error) *AuthRepository_RegisterUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuthRepository creates a new instance of AuthRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthRepository {
	mock := &AuthRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
